openapi: 3.0.0
info:
  title: 'API VELIKO'
  description: 'API VELIKO est une API de gestion des stations de vélos en libre service <br> Documentation : https://studoo-app.github.io/mock-veliko-api/'
  contact:
    name: 'Benoit Foujols'
    email: Benoit.Foujols@ac-creteil.fr
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 0.3.2
servers:
  -
    url: 'http://localhost:9042'
paths:
  /api/init/data:
    get:
      tags:
        - Initialisation
      summary: init-data
      description: "Vous pouvez initialisation de l'API VELIKO. Elle permet de récupérer les données des stations et des status des stations sur API officielle de VELIB"
      operationId: InitData
      responses:
        '200':
          description: "Initialisation de l'API VELIKO est excutée avec succès"
          content:
            application/json:
              examples:
                /api/init/data:
                  summary: /api/init/data
                  value: { status: success, message: 'API VELIKO is running' }
        '500':
          description: 'Erreur interne du serveur'
          content:
            application/json:
              examples:
                error:
                  summary: 'Erreur interne'
                  value: { status: error, message: 'Une erreur interne est survenue, veuillez regarder les logs serveur' }
  /api/init/schema:
    get:
      tags:
        - Initialisation
      summary: init-schema
      description: "Vous pouvez initialisation de la scruture de la base de données de l'API VELIKO. Elle permet de créer les tables de la base de données en cas de reset"
      operationId: InitSchema
      responses:
        '200':
          description: "Initialisation de la structure de l'API VELIKO est excutée avec succès"
          content:
            application/json:
              examples:
                /api/init/schema:
                  summary: /api/init/schema
                  value: { status: success, message: 'Structure API VELIKO is done' }
        '500':
          description: 'Erreur interne du serveur'
          content:
            application/json:
              examples:
                error:
                  summary: 'Erreur interne'
                  value: { status: error, message: 'Une erreur interne est survenue, veuillez regarder les logs serveur' }
  '/api/station/{id}':
    get:
      tags:
        - station
      description: "Récupérer les informations d une station par son ID (station_id)<br>\n        La description des champs:<br>\n        - station_id: ID de la station<br>\n        - stationCode: Code de la station<br>\n        - name: Nom de la station<br>\n        - lat: Latitude de la station<br>\n        - lon: Longitude de la station<br>\n        - capacity: Capacité de la station<br>\n        "
      operationId: getStationById
      parameters:
        -
          name: id
          in: path
          description: 'ID de la station'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Liste d'une station est transmise avec succès"
          content:
            application/json:
              examples:
                /api/station/213688169:
                  summary: /api/station/213688169
                  value: { station_id: 213688169, stationCode: '16107', name: 'Benjamin Godard - Victor Hugo', lat: 48.865983, lon: 2.275725, capacity: 35 }
  '/api/station/{id}/status[/{optional}]':
    get:
      tags:
        - station
      description: "Récupérer le status d une station par son ID (station_id)<br>\n        Statut d une station dans son état actuel, celle-ci à une timestamp de dernière mise à jour (last_reported).<br>\n        La description des champs:<br>\n        - station_id: ID de la station<br>\n        - stationCode: Code de la station<br>\n        - name: Nom de la station<br>\n        - lat: Latitude de la station<br>\n        - lon: Longitude de la station<br>\n        - capacity: Capacité de la station<br>\n        - num_bikes_available: Nombre de vélos disponibles<br>\n        - num_bikes_available_types: Nombre de vélos disponibles par type (mécanique, électrique)<br>\n        - num_docks_available: Nombre de places disponibles<br>\n        - is_installed: Installation de la station (voir dans la fonction getStationsStatus)<br>\n        - is_returning: Recevoir des vélos dans la station (voir dans la fonction getStationsStatus)<br>\n        - is_renting: Location de la station (voir dans la fonction getStationsStatus)<br>\n        - last_reported: Timestamp de la dernière mise à jour de la station<br>\n        - bikes_available_types: Liste des vélos disponibles avec distinction entre Vélib’ mécanique et électrique (optionnel)<br>\n        Voir les exemples de reponse -> -> -><br>\n        "
      operationId: getStationStatusById
      parameters:
        -
          name: id
          in: path
          description: 'ID de la station'
          required: true
          schema:
            type: integer
        -
          name: optional
          in: path
          description: 'Element optionnel pour récupérer les vélos disponibles. Valeur possible: velo'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Station status est récupéré avec succès'
          content:
            application/json:
              examples:
                /api/station/17278902806/status:
                  summary: /api/station/17278902806/status
                  value: { station_id: 17278902806, stationCode: 44015, name: 'Rouget de L isle - Watteau', lat: '48.778192750803', lon: '2.3963020229163', capacity: 20, num_bikes_available: 4, num_bikes_available_types: '[{"mechanical":1},{"ebike":3}]', num_docks_available: 16, is_installed: 1, is_returning: 1, is_renting: 1, last_reported: 1724180445 }
                /api/station/17278902806/status/velo:
                  summary: /api/station/17278902806/status/velo
                  value: { station_id: 17278902806, stationCode: 44015, name: 'Rouget de L isle - Watteau', lat: '48.778192750803', lon: '2.3963020229163', capacity: 20, num_bikes_available: 4, num_bikes_available_types: '[{"mechanical":1},{"ebike":2}]', num_docks_available: 16, is_installed: 1, is_returning: 1, is_renting: 1, last_reported: 1724180445, bikes_available_types: [{ velo_id: 245671, type: mechanical, status: available, num_km_total: 234, station_id_available: 17278902806 }, { velo_id: 37654, type: ebike, status: available, num_km_total: 345, station_id_available: 17278902806 }, { velo_id: 434, type: ebike, status: available, num_km_total: 457, station_id_available: 17278902806 }] }
  /api/stations:
    get:
      tags:
        - station
      description: "Récupérer une liste des informations des stations<br>\n        La description des champs:<br>\n        - station_id: ID de la station<br>\n        - stationCode: Code de la station<br>\n        - name: Nom de la station<br>\n        - lat: Latitude de la station<br>\n        - lon: Longitude de la station<br>\n        - capacity: Capacité de la station<br>\n        "
      operationId: getStations
      responses:
        '200':
          description: 'Liste des informations des stations sont transmises'
          content:
            application/json:
              examples:
                /api/stations:
                  summary: /api/stations
                  value: [{ station_id: 213688169, stationCode: '16107', name: 'Benjamin Godard - Victor Hugo', lat: 48.865983, lon: 2.275725, capacity: 35 }, { station_id: 36255, stationCode: '9020', name: 'Toudouze - Clauzel', lat: 48.879295917335, lon: 2.3373600840569, capacity: 21 }]
  /api/stations/status:
    get:
      tags:
        - status
        - station
      summary: getStationsStatus
      description: "Liste des status des stations, voici la structure de données\n        <ul>\n            <li>station_id : numéro unique d’identification de la station. Ce numéro identifie la station au sein du service Vélib’ Métropole</li>\n            <li>is_installed : variable binaire indiquant si la station est. La station a déjà été déployée (1) ou est encore en cours de déploiement (0)</li>\n            <li>is_renting : variable binaire indiquant si la station peut louer des vélos (is_renting=1 si le statut de la station est Operative)</li>\n            <li>is_returning : variable binaire indiquant si la station peut recevoir des vélos (is_renting=1 si le statut de la station est Operative)</li>\n            <li>last_reported : date de la dernière mise-à-jour</li>\n            <li>numBikesAvailable : nombre de vélos disponibles</li>\n            <li>numDocksAvailable : nombre de bornettes disponibles</li>\n            <li>num_bikes_available : nombre de vélos disponibles</li>\n            <li>num_bikes_available_types : nombre de vélos disponibles avec distinctions entre Vélib’ mécanique et électrique</li>\n        </ul>"
      operationId: getStationsStatus
      responses:
        '200':
          description: 'Liste des status des stations sont transmis'
          content:
            application/json:
              examples:
                /api/stations/status:
                  summary: /api/stations/status
                  value: [{ station_id: '213688169', num_bikes_available: 7, num_bikes_available_types: { mechanical: 7, ebike: 0 }, num_docks_available: 16, is_installed: 1, is_returning: 1, is_renting: 1, last_reported: 1633669200 }, { station_id: '17278902806', num_bikes_available: 4, num_bikes_available_types: { mechanical: 2, ebike: 2 }, num_docks_available: 15, is_installed: 1, is_returning: 1, is_renting: 1, last_reported: 1724180746 }]
  '/api/velo/{id}':
    get:
      tags:
        - velo
      summary: getVeloById
      description: "Information du vélos, voici la structure de données\n        <ul>\n            <li>velo_id : numéro unique d’identification du vélo.</li>\n            <li>type : variable texte indiquant si le vélo est : mécanique (\"mechanical\") ou électrique (\"ebike\")</li>\n            <li>status : variable texte indiquant si le vélo est : opérationnel (\"available\"), en cours de location (\"location\"), en anomalie (\"fail\") ou en cours de réparation (\"repair\")</li>\n            <li>num_km_total : Nombre de kilometre</li>\n            <li>station_id_available : ID station rattaché en moment et au départ</li>\n        </ul>"
      operationId: getVeloById
      parameters:
        -
          name: id
          in: path
          description: 'ID du vélo'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'L information du vélos sont transmis'
          content:
            application/json:
              examples:
                /api/velo/245671:
                  summary: /api/velo/245671
                  value: { velo_id: 245671, type: mechanical, status: available, num_km_total: 234, station_id_available: 17278902806 }
  /api/velos:
    get:
      tags:
        - velo
      summary: getVelos
      description: "Liste des vélos, voici la structure de données\n        <ul>\n            <li>velo_id : numéro unique d’identification du vélo.</li>\n            <li>type : variable texte indiquant si le vélo est : mécanique (\"mechanical\") ou électrique (\"ebike\")</li>\n            <li>status : variable texte indiquant si le vélo est : opérationnel (\"available\"), en cours de location (\"location\"), en anomalie (\"fail\") ou en cours de réparation (\"repair\")</li>\n            <li>num_km_total : Nombre de kilometre</li>\n            <li>station_id_available : ID station rattaché en moment et au départ</li>\n        </ul>"
      operationId: getVelos
      responses:
        '200':
          description: 'Liste des vélos sont transmis'
          content:
            application/json:
              examples:
                /api/velos:
                  summary: /api/velos
                  value: [{ velo_id: 245671, type: mechanical, status: available, num_km_total: 234, station_id_available: 17278902806 }, { velo_id: 434, type: ebike, status: available, num_km_total: 457, station_id_available: 17278902806 }]
  '/api/velo/{id}/location':
    put:
      tags:
        - velo
      summary: getVeloLocById
      description: 'Location du vélo via son ID, Cette méthode permet de retirer le Vélo de la station'
      operationId: getVeloLocById
      parameters:
        -
          name: id
          in: path
          description: 'ID du vélo'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'L information du vélos sont transmis'
          content:
            application/json:
              examples:
                /api/velo/245671/location:
                  summary: /api/velo/245671/location
                  value: { velo_id: 245671, type: mechanical, status: location, num_km_total: 234, station_id_available: 17278902806 }
      security:
        -
          HeaderAuthorization: []
  '/api/velo/{velo_id}/restore/{station_id}':
    put:
      tags:
        - velo
      summary: getVeloRestoreById
      description: 'Restaurer le vélo loué via son ID, Cette méthode permet de rendre le Vélo loué dans une station'
      operationId: getVeloRestoreById
      parameters:
        -
          name: velo_id
          in: path
          description: 'ID du vélo loué'
          required: true
          schema:
            type: integer
        -
          name: station_id
          in: path
          description: "ID de la nouvelle station d'accueil"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'L information du vélos sont transmis'
          content:
            application/json:
              examples:
                /api/velo/245671/restore/17278902806:
                  summary: /api/velo/245671/restore/17278902806
                  value: { velo_id: 245671, type: mechanical, status: available, num_km_total: 234, station_id_available: 17278902806 }
      security:
        -
          HeaderAuthorization: []
components:
  securitySchemes:
    HeaderAuthorization:
      type: http
      description: "Authorization : token \n    <br> (token par defaut: RG6F8do7ERFGsEgwkPEdW1Feyus0LXJ21E2EZRETTR65hN9DL8a3O8a)"
      name: Authorization
      in: header
      scheme: header
tags:
  -
    name: Initialisation
    description: Initialisation
  -
    name: station
    description: station
  -
    name: status
    description: status
  -
    name: velo
    description: velo
